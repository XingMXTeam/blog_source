位运算的用法： 
判断奇偶
除以2
| 赋值
& 校验




思想：
二分法
动态规划： 找极值 找零钱 重点
回溯

环形链表： 套环了（跑圈） ； 重复访问了

双指针（链表、数组）


*树* 前端最重要： 递归和迭代的思想

层级遍历（虚拟dom) ： 最长递增子序列（vue的renderer.ts getSequence keepAlive(LRU Cache 基于链表的缓存结构)

拿公式（框架）套题目

 每个字都懂 就是看不懂（说明原理不懂）

node + ts(next.js) node’s 录播+直播答疑
快排没有保证 冒泡有保证

预售是提前支持

源码react vue vite

算法是难的（其他都是工程问题： 比如typescript react 之类的）

字节喜欢问： 任务和队列的问题(react18的任务调度）

业务方向负责人（和用户打交道的）

自己做的产品化的东西（搞一个MVP 博客的教程 builder on react


大整数（数组存 


动态规划： 

1 暴力
2 缓存
3 递推公式（整个50个题目练习）


书籍： 算法

学浪： 有试看

你是前端 但是是科班出身 你的优势是？

裁员： 保持你的核心竞争力
独当一面的技术点（1到2个 vue或者react或者node 可以谈笑风生 问不倒你｜组件化、性能、脚本）

外包CRUD项目的亮点是？： 贪多嚼不烂
1 性能： lighthouse 基准点
2 研发效率： lowcode \组件\脚手架。发布到github 能有点影响力
3 稳定性： 单元测试（出问题概率比较低）、监控、兜底的方案（接口挂了 怎么办）
4 大数据场景： 

antfu的小库（1000行以内）： ni 

看源码： 
框架的mini版本 、书、教程 生啃太难了
下载框架源码（debugger）vue的设计和实现

react源码： kasong 
https://react.iamkasong.com/preparation/jsx.html

校验有没有掌握： 自己写一个mini系统 证明你掌握了


刷算法

博客中写教程：添加代码演示工具






https://juejin.cn/post/6961961165656326152

https://vue-next-template-explorer.netlify.app/#eyJzcmMiOiI8ZGl2PkhlbGxvIFdvcmxkPC9kaXY+Iiwib3B0aW9ucyI6e319