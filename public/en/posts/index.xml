<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on maoxunxing&#39;s life</title>
    <link>https://maoxunxing.com/en/posts/</link>
    <description>Recent content in Posts on maoxunxing&#39;s life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 21 Apr 2022 22:37:20 +0800</lastBuildDate>
    
	<atom:link href="https://maoxunxing.com/en/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Array Part 4 - K’th Smallest/Largest Element in Unsorted</title>
      <link>https://maoxunxing.com/en/k-th-smallest-inthearray/</link>
      <pubDate>Thu, 21 Apr 2022 22:37:20 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/k-th-smallest-inthearray/</guid>
      <description>问题 Given an array and a number k where k is smaller than the size of the array, we need to find the k’th smallest element in the given array. It is given that all array elements are distinct.
Input: arr[] = {7, 10, 4, 3, 20, 15} k = 3 Output: 7
Input: arr[] = {7, 10, 4, 3, 20, 15} k = 4 Output: 10
解答 function getKthSmallest(arr, k) { const newarr = arr.</description>
    </item>
    
    <item>
      <title>Array Part 3 - Find the Largest Sum of Contiguous Subarray </title>
      <link>https://maoxunxing.com/en/max-sum/</link>
      <pubDate>Sun, 17 Apr 2022 20:44:08 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/max-sum/</guid>
      <description>问题 Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers that has the largest sum.
arr = [-2, -3, 4, -1, -2, 1, 5, -3]
OutPut: 7 Explain: 4 + -1 + -2 + 1 + 5 = 7
解答 这个能处理全为负数的情况
// DP ? let maxSoFar = arr[0] let maxEndingHere = arr[0] for(let i = 1; i &amp;lt; arr.length; i++) { // 计算出来的和 和当前值 取更大的那个作为当前最大值  maxEndingHere = Math.</description>
    </item>
    
    <item>
      <title>String Part 1 - Longest Palindromic Substring</title>
      <link>https://maoxunxing.com/en/substring-longest/</link>
      <pubDate>Sat, 16 Apr 2022 23:59:19 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/substring-longest/</guid>
      <description>问题 Given a string, find the longest substring which is a palindrome. For Example:
Input: Given string :&amp;ldquo;forgeeksskeegfor&amp;rdquo;, Output: &amp;ldquo;geeksskeeg&amp;rdquo;.
Input: Given string :&amp;ldquo;Geeks&amp;rdquo;, Output: &amp;ldquo;ee&amp;rdquo;.
解答 代码模版：
low = index - 1 high = index + 1 // 跳掉重复 while( high &amp;lt; n &amp;amp;&amp;amp; str[high] == str[index]){ high++ } // 跳掉重复 while( low &amp;gt;= 0 &amp;amp;&amp;amp; str[low] == str[index]) { low-- } // 中间是回文 while( low &amp;gt;= 0 &amp;amp;&amp;amp; high &amp;lt; n &amp;amp;&amp;amp; str[low] == str[high]) { low-- high++ } let length = high - low - 1 if(maxLength &amp;lt; length) { maxLength = length start = low + 1 } 存在两个循环，外面遍历整个字符串，里面从i开始往外扩，最坏就是扩到头尾，所以时间复杂度是O(n) 空间只有单个变量，空间复杂度是O(1)</description>
    </item>
    
    <item>
      <title>Array Part 2 - Minimum number of jumps to reach end</title>
      <link>https://maoxunxing.com/en/mininumber-to-end/</link>
      <pubDate>Sat, 16 Apr 2022 22:29:56 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/mininumber-to-end/</guid>
      <description>问题 Given an array of integers where each element represents the max number of steps that can be made forward from that element. Write a function to return the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then we cannot move through that element. If we can’t reach the end, return -1. Examples:
Input: arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9} Output: 3 (1-&amp;gt; 3 -&amp;gt; 8 -&amp;gt; 9) Explanation: Jump from 1st element to 2nd element as there is only 1 step, now there are three options 5, 8 or 9.</description>
    </item>
    
    <item>
      <title>个人如何快速成长</title>
      <link>https://maoxunxing.com/en/personal-grow/</link>
      <pubDate>Sat, 02 Apr 2022 17:27:56 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/personal-grow/</guid>
      <description>背景 方法论虽然虚，但的确有用。在工作中能从更高维度指导你的工作和学习。最近有学一些，做一些总结，欢迎指正。
学什么 关于学什么，每个人的岗位不同和职级不同，当然情况也不一样。比如针对P6级别，要向P7级别上升。个人理解总结起来就两方面基础能力和业务能力。基础能力要求专精、代码可扩展、可移植，能将能力产品化（有体系化建设）；业务理解深入，可根据数据挖掘定义问题，参与规划，带领至少5人完成项目（个人理解不仅仅是完成上级任务），拿到结果。
所以需重点关注本领域开发岗知识。对于业务理解，主要从用户是谁、用户价值、获客获利等角度去思考。
成长模型 知道学什么之后，需要梳理成长模型。包含两个方面一个是软技能，一个是硬技能。软技能主要是沟通、说服能力。有几个要点：
1 日常工作中尽量借助文档协作
2 注意AB问题陷阱：用户也许问题的问题并不是它真正想要解决的问题，问题到底是什么很重要以及它的范围： 产品范围？还是技术范围？还是业务范围？
3 分享。一般要求PPT。需要注意：
* 文档要少形容词，不说废话，要有主线和结构 * PPT一般是演讲结合，PPT一般占比30%，70%靠演讲说出来。制作PPT时注意这几点：1种字体（强对比度）1张大图（搞笑的图 哲理话 不要弄很大的架构图） 3种颜色（同一色系，层次渐变），一般图 &amp;gt; 表 &amp;gt; 字；而演讲有几个要点 * 需要考虑受众，尽量在开始不要太深入，需要介绍下背景知识 * 为了避免紧张，可以适当放慢速度，就像聊天 * 话题不要发散，围绕主线逐渐深入 * 中途可以适当互动，回答问题时面向大众，而不是提问者。不在范围内的或者棘手问题，可以记录下，会后单独沟通。  而硬技能，不同岗位不太一样。针对程序员，如果你不是技术经理或者架构师，那么只需要考虑
1 基础知识：底层原理、操作系统、程序语言、算法、数据结构、数据、网络、安全
2 软件工程：设计模式、规范、日志、单测、故障恢复、方案优劣对比、技术选型、敏捷开发
3 编程能力：性能、扩展性、维护成本、鲁棒性
通过构建领域分层图、细节分层图逐步完善个人知识领域、理解深度。
题外话：
关于深度和广度：在一个平台下成长，不用面面俱到，所有都知道细节。有些东西，知道它解决什么问题就行，这是广度，深度是你需要了解所有细节的，在你所在行业领域，它是你的核心竞争力，广度和深度不是割裂开的，广度有时候能加强你的深度。在竞争场，个人也是一个产品，要弱化自己的弱点，充分突出你的竞争力 关于努力工作：不要欺骗自己，要认识自己的长处，做你所热爱领域的事
学习方法 在了解了成长模型后，需要有一定方法指导你学习。 时间上：希望能通过海绵学习法，利用好碎片时间，保证时间投入（1万小时定律也不是没有道理）。方法上：重视实践和复盘。因为根据 721原则 ：“721”学习法则是由摩根、罗伯特和麦克三人在合著《构筑生涯发展规划》 中正式提出，总结来说就是：
 70%做中学（练习） 20%向他人学习（复盘、总结、分享交流）
 10%自学（输入：培训、书）
  大部分时候知识并不能直接转换为解决问题的能力，需要反复复盘，思考为什么，解决问题去加深理解（因为你有场景 具体化了 所以你理解了）。大部分的人都是从实践中总结经验，掌握知识精髓，纯粹靠输入不一定有效和记忆也不一定深刻。这里说的是知识效率和工程效率的区别。
另外，可以结合你的平台和手头工具辅助学习：
输入：你有哪些优质的信息来源，这个需要有意识地收集，多看书，看代码，培训、周报，加入牛逼的平台，接触更多的人，还要有开放的心态（看东西以后 要开始总结 对比差距，不要仅仅局限在一个小的Scope，要有和其他方对话的能力）
记忆理解：通过结构化思维/图表/思维导图总结提炼，通过卡片工具比如Anki，加强记忆。脑海中有结构，就像图书馆随时能索引 ；金字塔原理、思维导图、类图等等；多关联，把你的东西和其他东西类比
表达使用：通过文章的分享，和他人交流中学习。参与工作，从项目中学习，从解决实际的问题中学习，从教给其他人知识中学习。能强化和补充你的提炼
解决问题 有了能力以后，需要去解决实际的问题，才能最大化你的价值。作为程序员，分析问题从软件工程角度去看，大概率没错，考虑问题也会比较全面，简单点就是从事前（需求分析）、事中（设计/编码）、事后（维护）。</description>
    </item>
    
    <item>
      <title>A11Y - 无障碍编程</title>
      <link>https://maoxunxing.com/en/aria/</link>
      <pubDate>Sat, 02 Apr 2022 10:31:39 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/aria/</guid>
      <description> What is A11Y? Accessibility (often abbreviated to A11y — as in “a” then 11 characters then “y”) in Web development means enabling as many people as possible to use Web sites, even when those people&amp;rsquo;s abilities are limited in some way.
网络开发中的可访问性（通常缩写为A11y&amp;ndash;如 &amp;ldquo;a &amp;ldquo;然后是11个字符然后是 &amp;ldquo;y&amp;rdquo;）意味着使尽可能多的人能够使用网站，即使这些人的能力在某些方面受到限制。
Knowledge Mapping 知识图谱   </description>
    </item>
    
    <item>
      <title>CSS实现细节梳理</title>
      <link>https://maoxunxing.com/en/css-i-learned/</link>
      <pubDate>Thu, 23 Dec 2021 20:03:38 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/css-i-learned/</guid>
      <description>布局组件：
 不要用wrapper这样的dom结构， 避免表格思维，有多余的行/列元素   不用javascript控制布局  所有布局和对齐都用Flexbox/Grids实现，不用absolute, display:table, float
height/line-height，display: inline-block/vertical-align: middle 不可靠
滚动链问题：
/* chrome63+ firefox 59+ / safari edge not support */ overflow-behaviour: contain; 避免同时出现水平和垂直滚动：
overflow-x: auto; overflow-x: hidden; 折行：
overfloww-wrap: break-word; hyphens: auto; /* 限制行数 */ -webkit-line-clamp: 3;  不折行： 标题 列头 按钮
overflow: hidden; text-overflow: ellipsis; /* th */ white-space: nowrap;  以上在flexbox容器还是会溢出？ min-width: 0(配合flex: 1使用)
vs:
width: max-content; 防止内容显示不全/被截断：
 避免定宽/定高，用min-width/min-height替代
定宽高会出现内容溢出，对齐用Flex-box</description>
    </item>
    
    <item>
      <title>NodeJS系列 - Stream</title>
      <link>https://maoxunxing.com/en/nodejs-network-stream/</link>
      <pubDate>Tue, 19 Oct 2021 14:28:57 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/nodejs-network-stream/</guid>
      <description>什么是流 流不是仅存在于Nodejs, 在unix操作系统中也有类似的概念。 比如管道操作符号
cat xx.ts | grep &amp;#39;console.log&amp;#39; 能从文件中找到对应的匹配内容。实际上，node的流的概念是来源于unix系统，最早是来自Douglas McIlroy管道的概念 最初的来源。
维基百科：
 Malcolm Douglas McIlroy (born 1932) is a mathematician, engineer, and programmer. As of 2019 he is an Adjunct Professor of Computer Science at Dartmouth College. McIlroy is best known for having originally proposed Unix pipelines and developed several Unix tools, such as spell, diff, sort, join, graph, speak, and tr.[1] He was also one of the pioneering researchers of macro processors and programming language extensibility.</description>
    </item>
    
    <item>
      <title>2021年度总结</title>
      <link>https://maoxunxing.com/en/target-life/</link>
      <pubDate>Fri, 17 Sep 2021 13:12:13 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/target-life/</guid>
      <description>俗话说，没有梦想和咸鱼有什么区别。所有的梦想都需要扎根于现实，否则就是空中楼阁，痴人说梦。在现实中，要汲取生活的乐趣。而工作是生活的一大部分，工作中的快乐程度决定了你生活中的快乐程度。把你的职业生涯当成一段旅程，深入体验，而不是觉得工作是在浪费时间和生命
2014我从南昌大学毕业。开始在HitThink公司工作，担任前端工程师。我没有生活目标，只是作为一个工具工作。我和我的女朋友很幸福。 2016.7 ~ 2019.9: 我离开了HitThink公司，因为我开始讨厌和我的同事一起工作。我开始意识到，我应该和优秀的同事和好的公司一起工作。通过推荐，我开始到网易公司面试。幸运的是，我成功了，进入了教育业务部。我学到了很多东西，认识了一些好朋友，也得到了晋升。 2019.9～现在。我曾以为自己会在网易公司工作很长时间。但是，一切都没有按照自己的意愿进行。业务部门的解散使我不得不另找工作，同时我也和我八年的女朋友分手了。我的一切都变了。我还生了一场大病，瘦到了90磅。在网易公司工作时，我的工资并不高。我开始考虑要买自己的房子，我需要提高我的工资。所以我去了阿里巴巴公司面试。 我成功了。当你学了很多东西，努力了很多，你总是可以通过我的内心深处的想法来实现的。在阿里巴巴集团的前两年，我努力工作，除了没有晋升，我觉得我收获的很多。另外终于我在我想要的地方买了自己的房子。如果你不能晋升，你应该尽可能多地学习，尽可能多地写作，尽可能多地展示自己，这就是我现在的想法，因为终究别人的认可，不是我快乐的源泉，我希望能走向自己的一条道路。
按部就班的工作，在职场上永远不可能突破性的提升，需要往前走一步，没有章法，需要多关注兴趣和爱好，激发自己的工作激情。需要养成良好的习惯，通过科学的方法，管理好自己。2021年我在杭州买房扎根，恍恍惚惚，已经32岁了，一路走来，不那么精彩，大部分时间如行尸走肉般，有犯一些错误，走一些弯路。未来希望尽心尽力感受生活的精彩，身体没有病痛，没有什么遗憾，及时行乐。
工作核心还是是提高编码和解决问题的能力，以及商业的能力。需要有强烈的态度和向上的动力，动力来源于欲望和兴趣。尽快成家，过去的人和事，只能回忆，不能改变，都随他吧。 奔向未来是唯一的出路。个人正能量，不断学习，投入，产出。增强自我意识，结交朋友，更加有趣，与他人更加融洽。通过成长闭环驱动自我：核心是每年有一个北极星目标，然后制定战略来实施，通过习惯和兴趣驱动。
坐下来，整理你的思路。Make Your Dream Happen !
计划 大O：成为一名独立开发者（内容提供者），专注帮助新人开发者，解决他们初入职场的技术问题和职业咨询，具备自我生存能力
核心收入来源：1 咨询 2 电子书/课程出售
O1: 对React技术栈非常熟练，具备咨询答疑能力 KR1: 完成React技术梳理，对比vue的文章，出一本技术册子 KR2: 实现DEMO例子，并开源 KR3: 完成性能优化技术梳理，出一本技术册子 KR4: 实现DEMO例子，并开源
O2: 对低码核心技术非常熟练，具备咨询答疑能力 KR1: 对比常见搭建框架技术，完成技术梳理，出一本技术册子 KR2: 实现mini版本，并开源
O3: 具备非常强的Coding能力，算法答疑 KR1: 刷完基础算法，出一本算法册子
O4: 对工程技术非常熟悉，工程答疑 KR1: 梳理常见工程原理，出一本技术册子 kR2: 实现mini版本，并开源
   类别 子目标 完成时间 完成状态     个人博客（主要阵地） 完成博客搭建 2021.12.01 完成   个人博客 至少完成10篇文章，pv到200 2021.12.01 未完成： 4篇   掘金小册子 算法一本书 2021.</description>
    </item>
    
    <item>
      <title>我对数字货币的理解</title>
      <link>https://maoxunxing.com/en/bitcion/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maoxunxing.com/en/bitcion/</guid>
      <description>Concepts 概念 1 非同质化代币（NFT)
典型作品： cryptopunks/cryptokitties.co/nbatopshot.com/cryptoslam.io
平台： opensea.io/sandbox.game/淘宝店发行/Rarible/幻核
2 同质化代币
3 原生币
4 代币</description>
    </item>
    
    <item>
      <title>Array Part 1 - 长度为k的子数组的最大值</title>
      <link>https://maoxunxing.com/en/maximum-of-all-subarrays-of-size-k/</link>
      <pubDate>Thu, 26 Aug 2021 15:16:39 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/maximum-of-all-subarrays-of-size-k/</guid>
      <description>问题 Give an array and an integer K, find the maximum for each and every condiguous subarray of size k.
Examples:
Input: arr[] = { 1, 2, 3, 1, 4, 5, 2, 3, 6 } K = 3
Ouput: 3 3 4 5 5 5 6
Maximum of 1, 2, 3 is 3
Maximum of 2, 3, 1 is 3
Maximum of 3, 1, 4 is 4
Maximum of 1, 4, 5 is 5</description>
    </item>
    
    <item>
      <title>Graphs Part 1 - Detect Cycle in an Undirected Graph</title>
      <link>https://maoxunxing.com/en/detect-cycle-in-an-undirected-graph/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maoxunxing.com/en/detect-cycle-in-an-undirected-graph/</guid>
      <description>Question Definition (S &amp;amp; T) Given an undirected graph, how to check if there is a cycle in the graph ?
Example 1:
Input：n = 4 , e = 4, the edges = { 0 1, 1 2, 2 3, 0 2 }
Output: yes
Diagram:
 has circle
  Example 2:
Input: n = 4, e = 3, the edges: { 0 1, 1 2, 2 3 }</description>
    </item>
    
    <item>
      <title>Tree Part 2 - Given N, Find The Total Number of Unique BSTs</title>
      <link>https://maoxunxing.com/en/find-the-total-number-of-unique-bsts-of-n/</link>
      <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maoxunxing.com/en/find-the-total-number-of-unique-bsts-of-n/</guid>
      <description>Question Definition (S &amp;amp; T) Given N, Find the total number of unique BSTs that can be made using values from 1 to N
Examples:
Input: n = 3
Output: 5
For n = 3, preorder traversal of
 1 2 3 1 3 2 2 1 3 3 1 2 3 2 1  Input: 4
Output: 14
Problem Analysis(A) At first, I did not quite understand what the question means.</description>
    </item>
    
  </channel>
</rss>