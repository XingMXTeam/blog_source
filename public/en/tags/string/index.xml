<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>String on maoxunxing&#39;s life</title>
    <link>https://maoxunxing.com/en/tags/string/</link>
    <description>Recent content in String on maoxunxing&#39;s life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Apr 2022 23:59:19 +0800</lastBuildDate><atom:link href="https://maoxunxing.com/en/tags/string/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>String Part 1 - Longest Palindromic Substring</title>
      <link>https://maoxunxing.com/en/substring-longest/</link>
      <pubDate>Sat, 16 Apr 2022 23:59:19 +0800</pubDate>
      
      <guid>https://maoxunxing.com/en/substring-longest/</guid>
      <description>问题 Given a string, find the longest substring which is a palindrome. For Example:
Input: Given string :&amp;ldquo;forgeeksskeegfor&amp;rdquo;, Output: &amp;ldquo;geeksskeeg&amp;rdquo;.
Input: Given string :&amp;ldquo;Geeks&amp;rdquo;, Output: &amp;ldquo;ee&amp;rdquo;.
解答 代码模版：
low = index - 1 high = index + 1 // 跳掉重复 while( high &amp;lt; n &amp;amp;&amp;amp; str[high] == str[index]){ high++ } // 跳掉重复 while( low &amp;gt;= 0 &amp;amp;&amp;amp; str[low] == str[index]) { low-- } // 中间是回文 while( low &amp;gt;= 0 &amp;amp;&amp;amp; high &amp;lt; n &amp;amp;&amp;amp; str[low] == str[high]) { low-- high++ } let length = high - low - 1 if(maxLength &amp;lt; length) { maxLength = length start = low + 1 } 存在两个循环，外面遍历整个字符串，里面从i开始往外扩，最坏就是扩到头尾，所以时间复杂度是O(n) 空间只有单个变量，空间复杂度是O(1)</description>
    </item>
    
  </channel>
</rss>
